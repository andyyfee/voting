/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface VotingInterface extends utils.Interface {
  functions: {
    "addCandidate(address,uint256)": FunctionFragment;
    "candidates(address)": FunctionFragment;
    "closure()": FunctionFragment;
    "getCandidates()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeCandidate(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "start(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vote(address)": FunctionFragment;
    "winner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCandidate"
      | "candidates"
      | "closure"
      | "getCandidates"
      | "owner"
      | "paused"
      | "removeCandidate"
      | "renounceOwnership"
      | "start"
      | "transferOwnership"
      | "vote"
      | "winner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "candidates", values: [string]): string;
  encodeFunctionData(functionFragment: "closure", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeCandidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "start", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [string]): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closure", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;

  events: {
    "CandidateAdded(address)": EventFragment;
    "CandidateRemoved(address)": EventFragment;
    "Finished(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Started(uint256,uint256)": EventFragment;
    "Voted(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CandidateAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CandidateRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Started"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export interface CandidateAddedEventObject {
  _address: string;
}
export type CandidateAddedEvent = TypedEvent<
  [string],
  CandidateAddedEventObject
>;

export type CandidateAddedEventFilter = TypedEventFilter<CandidateAddedEvent>;

export interface CandidateRemovedEventObject {
  _address: string;
}
export type CandidateRemovedEvent = TypedEvent<
  [string],
  CandidateRemovedEventObject
>;

export type CandidateRemovedEventFilter =
  TypedEventFilter<CandidateRemovedEvent>;

export interface FinishedEventObject {
  _winner: string;
}
export type FinishedEvent = TypedEvent<[string], FinishedEventObject>;

export type FinishedEventFilter = TypedEventFilter<FinishedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StartedEventObject {
  _startedAt: BigNumber;
  _endsAt: BigNumber;
}
export type StartedEvent = TypedEvent<
  [BigNumber, BigNumber],
  StartedEventObject
>;

export type StartedEventFilter = TypedEventFilter<StartedEvent>;

export interface VotedEventObject {
  _voter: string;
  _candidate: string;
}
export type VotedEvent = TypedEvent<[string, string], VotedEventObject>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface Voting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCandidate(
      _address: string,
      _seniority: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    candidates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        index: BigNumber;
        count: BigNumber;
        seniority: BigNumber;
      }
    >;

    closure(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCandidates(overrides?: CallOverrides): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeCandidate(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      _candidate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    winner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCandidate(
    _address: string,
    _seniority: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  candidates(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      index: BigNumber;
      count: BigNumber;
      seniority: BigNumber;
    }
  >;

  closure(overrides?: CallOverrides): Promise<BigNumber>;

  getCandidates(overrides?: CallOverrides): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeCandidate(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    _candidate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  winner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCandidate(
      _address: string,
      _seniority: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    candidates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        index: BigNumber;
        count: BigNumber;
        seniority: BigNumber;
      }
    >;

    closure(overrides?: CallOverrides): Promise<BigNumber>;

    getCandidates(overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeCandidate(_address: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    start(_duration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(_candidate: string, overrides?: CallOverrides): Promise<void>;

    winner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CandidateAdded(address)"(_address?: null): CandidateAddedEventFilter;
    CandidateAdded(_address?: null): CandidateAddedEventFilter;

    "CandidateRemoved(address)"(_address?: null): CandidateRemovedEventFilter;
    CandidateRemoved(_address?: null): CandidateRemovedEventFilter;

    "Finished(address)"(_winner?: null): FinishedEventFilter;
    Finished(_winner?: null): FinishedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Started(uint256,uint256)"(
      _startedAt?: null,
      _endsAt?: null
    ): StartedEventFilter;
    Started(_startedAt?: null, _endsAt?: null): StartedEventFilter;

    "Voted(address,address)"(
      _voter?: null,
      _candidate?: null
    ): VotedEventFilter;
    Voted(_voter?: null, _candidate?: null): VotedEventFilter;
  };

  estimateGas: {
    addCandidate(
      _address: string,
      _seniority: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    candidates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    closure(overrides?: CallOverrides): Promise<BigNumber>;

    getCandidates(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeCandidate(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      _candidate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    winner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCandidate(
      _address: string,
      _seniority: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    candidates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closure(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCandidates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCandidate(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      _candidate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    winner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
